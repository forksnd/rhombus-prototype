#lang rhombus
import:
  "version_guard.rhm"

// syntax-object templates with repetitions
block:
  def [x, ...] = [1, 2, 3]
  def [[y, ...], ...] = [["a", "b", "c"], ["A", "B", "C"]]
  def [[z, ...], _] = [["a", "b", "c"], ["A", "B", "C"]]
  def [_, &[q]] = [["a", "b", "c"], ["A", "B", "C"]]
  def [_, &[w, ...]] = [["a", "b", "c"], ["A", "B", "C"]]

  check:
    [x, ...]
    ~is [1, 2, 3]
  check:
    '[($y) ...] ...'
    ~matches '[("a") ("b") ("c")] [("A") ("B") ("C")]'
  check:
    '[($z) ...]'
    ~matches '[("a") ("b") ("c")]'
  check:
    q
    ~is ["A", "B", "C"]
  check:
    [w, ...]
    ~is [["A", "B", "C"]]

// syntax objects as repetitions
block:
  def [x, ...] = ['1', '2', '3']
  check:
    ['$x+1', ...]
    ~matches ['1+1', '2+1', '3+1']

// operator uses as repetitions
block:
  def [x, ...] = [1, 4, 3]
  def four = 4
  check:
    [!(x == four), ...]
    ~is [#true, #false, #true]
  check:
    [(x + (- four)), ...]
    ~is [-3, 0, -1]
  check:
    operator (x %% y): [x, y]
    [x %% four, ...]
    ~is [[1, 4], [4, 4], [3, 4]]

// function calls as reptitions
block:
  def [x, ...] = [1, 2, 3]
  check:
    fun f(x, y): {x: y}
    [f(x, 0), ...]
    ~is [{1: 0}, {2: 0}, {3: 0}]
  check:
    fun f(~x: x, y): {x: y}
    [f(~x: x, 0), ...]
    ~is [{1: 0}, {2: 0}, {3: 0}]
  check:
    fun f(& vs): vs
    [f(x, x, ...), ...]
    ~is [[1, 1, 2, 3], [2, 1, 2, 3], [3, 1, 2, 3]]

// function calls with rest arguments as repetitions
block:
  def [x, ...] = [[1], [2, 3]]
  check:
    fun f(& vs): vs
    [f(&x), ...]
    ~is [[1], [2, 3]]

// function calls with repetition arguments as repetitions
block:
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    fun f(v, ...): [[v, ...]]
    [f(x, ...), ...]
    ~is [[[1, 2, 3]], [[4, 5]]]
  check:
    fun f(v, ...): [v, ...]
    [f(x+1, ...), ...]
    ~is [[2, 3, 4], [5, 6]]

// function calls with keyword arguments as repetitions
block:
  def [x, ...] = [{#'~a: "a"}, {#'~b: "b"}]
  fun f(~a: a = #false, ~b: b = #false): [a, b]
  check:
    [f(~& x), ...]
    ~is [["a", #false], [#false, "b"]]

// if-conditionals as repetitions
block:
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [if x mod 2 == 1 | "odd" | "even", ..., ...]
    ~is ["odd", "even", "odd", "even", "odd"]
  check:
    [if x mod 2 == 1
     | println("odd")
       0
     | println("even")
       1,
     ..., ...]
    ~prints "odd\neven\nodd\neven\nodd\n"
  def mutable accum = 0
  fun inc(v): accum := accum + v
  check:
    [if x mod 2 == 1
     | inc(x)
       0
     | inc(x)
       1,
     ..., ...]
    ~is [0, 1, 0, 1, 0]
  check accum ~is 15

// blocks as repetitions
block:
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  def mutable accum = 0
  fun inc(v): accum := accum + v
  check: [block:
            inc(x)
            {x},
          ...,
          ...]
         ~is [{1}, {2}, {3}, {4}, {5}]
  check accum ~is 15

// static information through a constructor call as repetition
check:
  use_static
  class Posn(x, y)
  def [x, ...] = [1, 2, 3]
  [Posn(x, x), ...][1].x
  ~is 2


// static information through an if-conditional as repetition
block:
  use_static
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [if x mod 2 == 1 | "odd" | "even", ..., ...][1].length()
    ~is 4

// static information through a block as repetition
block:
  use_static
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [block: x; "any", ..., ...][1].length()
    ~is 3
  def [[s, ...], ...] = [["1", "2", "3"], ["4", "5"]]
  check:
    [block: print(""); s, ..., ...][1].length()
    ~is 1

// static information through nested repetitions
block:
  use_static
  class Posn(x, y)
  def [y :~ Posn, ...] = [Posn(1, 2)]
  def [[x :~ Posn, ...], ...] = [[Posn(1, 2)]]
  def '($z, ...) ...' = '(1, 2, 3) (4, 5)'
  check:
    [y, ...][0].x
    ~is 1
  check:
    [[x, ...], ...][0][0].x
    ~is 1
  check:
    [x, ..., ...][0].x
    ~is 1
  check:
    [[z, ...], ...][1][1].unwrap()
    ~is 5

// map- and set-building `{}` as a repetition
block:
  def [x, ...] = [1, 2, 3]
  check:
    [{x: 1}, ...]
    ~is [{1: 1}, {2: 1}, {3: 1}]
  check:
    [Map{x: 1}, ...]
    ~is [{1: 1}, {2: 1}, {3: 1}]
  check:
    [MutableMap{x: 1}, ...]
    ~is_now [{1: 1}, {2: 1}, {3: 1}].map(fun (s): Map.copy(s))
  check:
    use_static
    def m = [{x: 1}, ...]
    m[1][2]
    ~is 1
  check:
    [Set(x, 1), ...]
    ~is [{1}, {1, 2}, {1, 3}]
  check:
    [MutableSet{x, 1}, ...]
    ~is_now [{1}, {1, 2}, {1, 3}].map(fun (s): Set.copy(s))
  check:
    [MutableSet(x, 1), ...]
    ~is_now [{1}, {1, 2}, {1, 3}].map(fun (s): Set.copy(s))
  check:
    use_static
    def m = [{x}, ...]
    2 in m[1]
    ~is #true

// list-builiding `[]` as a repetition
block:
  def [x, ...] = [0, 10, 100]
  check:
    [1, 2, &[3, 4], 5, x, ..., 6]
    ~is [1, 2, 3, 4, 5, 0, 10, 100, 6]
  check:
    [[-1, x], ...]
    ~is [[-1, 0], [-1, 10], [-1, 100]]
  check:
    def [[z, ...], ...] = [[0, 10, 100], [333]]
    [[(z), ...], ...]
    ~is [[(0), (10), 100], [(333)]]

// reference `[]` as a repetition
block:
  use_static
  class Posn(x, y)
  def a :: List.of(Posn):
    [Posn(1, 1), Posn(2, 2), Posn(3, 3), Posn(4, 4)]
  def [x, ...] = [3, 2, 1]
  check:
    [a[x], ...][0].x
    ~is 4

// membership test `in` as a repetition
block:
  use_static
  class Posn(x, y)
  def a :: List.of(Posn):
    [Posn(1, 1), Posn(2, 2), Posn(3, 3), Posn(4, 4)]
  def [x, ...] = [Posn(2, 2), Posn(2, 3), Posn(3, 3)]
  check:
    [x in a, ...] ~is [#true, #false, #true]
    [x !in a, ...] ~is [#false, #true, #false]

// `(!)is_now` as a repetition
block:
  def [x, ...]:
    [Array(1, 2, 3), Array("foo", "bar", "baz"), ["not", "an", "array"]]
  check:
    [x is_now Array(1, 2, 3), ...] ~is [#true, #false, #false]
    [x !is_now Array(1, 2, 3), ...] ~is [#false, #true, #true]

// `::`/`:~` as a repetition
block:
  use_static
  def [x, ...] = [[], [1], [1, 2], [1, 2, 3]]
  check:
    [(x :: List).length(), ...] ~is [0, 1, 2, 3]
    [(x :~ List).length(), ...] ~is [0, 1, 2, 3]

// `(!)is_a` as a repetition
block:
  def [x, ...]:
    [Array(1, 2, 3), Array("foo", "bar", "baz"), ["not", "an", "array"]]
  check:
    [x is_a Array, ...] ~is [#true, #true, #false]
    [x !is_a Array, ...] ~is [#false, #false, #true]

// `(!)matches as a repetition
block:
  def [x, ...]:
    [Array(1, 2, 3), Array("foo", "bar", "baz"), ["not", "an", "array"]]
  check:
    [x matches Array(1, 2, 3), ...] ~is [#true, #false, #false]
    [x matches Array(_, _, _), ...] ~is [#true, #true, #false]
    [x !matches Array(1, 2, 3), ...] ~is [#false, #true, #true]
    [x !matches Array(_, _, _), ...] ~is [#false, #false, #true]

// dotted names as repetitions
block:
  def [i, ...] = [1, 2, 3]
  check:
    [[List.length, i], ...]
    ~is [[List.length, 1], [List.length, 2], [List.length, 3]]
  check:
    namespace M:
      export: N
      namespace N:
        export: three
        def three = 3
    [[i, M.N.three], ...]
    ~is [[1, 3], [2, 3], [3, 3]]
  check:
    namespace M:
      import:
        rhombus/meta open
      export pi_ish
      def three = 3
      repet.macro 'pi_ish': 'three'
    [[i, M.pi_ish], ...]
    ~is [[1, 3], [2, 3], [3, 3]]

// `.` as a repetition
block:
  use_static
  class Posn(x, y)
  def [p :: Posn, ...] = [Posn(1, 1), Posn(2, 2), Posn(3, 3), Posn(4, 4)]
  check:
    [p.x, ...]
    ~is [1, 2, 3, 4]
  class Square(tl :: Posn, s :: Int)
  def [s :: Square, ...] = [Square(Posn(0, 0), 10)]
  check:
    [s.tl, ...][0].x
    ~is 0

// literal-like repetitions
block:
  def [x, ...] = [1, 2, 3]
  check:
    [[x, 0, #false, #'symbol, #'~keyword, Char"a", Byte#"\0"], ...]
    ~is [
      [1, 0, #false, #'symbol, #'~keyword, Char"a", Byte#"\0"],
      [2, 0, #false, #'symbol, #'~keyword, Char"a", Byte#"\0"],
      [3, 0, #false, #'symbol, #'~keyword, Char"a", Byte#"\0"],
    ]

// splicing
block:
  use_static
  class Posn(x, y)
  def [[x :~ Posn, ...], ...] = [[Posn(1, 2)], [Posn(3, 4), Posn(5, 6)]]
  check:
    [x, ..., ...]
    ~is [Posn(1, 2), Posn(3, 4), Posn(5, 6)]
  check:
    [x.x, ..., ...]
    ~is [1, 3, 5]
  check:
    [x, ..., ...][1].x
    ~is 3
  fun f(x, ...): [x, ...]
  check:
    f(x, ..., ...)
    ~is [Posn(1, 2), Posn(3, 4), Posn(5, 6)]
  check:
    f(x, ..., ..., "done")
    ~is [Posn(1, 2), Posn(3, 4), Posn(5, 6), "done"]
  check:
    {x, ..., ...}
    ~is {Posn(1, 2), Posn(3, 4), Posn(5, 6)}
  check:
    {x, ..., ..., 0}
    ~is {0, Posn(1, 2), Posn(3, 4), Posn(5, 6)}
  check:
    {x: #true, ..., ...}
    ~is {Posn(1, 2): #true, Posn(3, 4): #true, Posn(5, 6): #true}
  check:
    {x: #true, ..., ..., 0: 0}
    ~is {0: 0, Posn(1, 2): #true, Posn(3, 4): #true, Posn(5, 6): #true}
  check:
    '$(x.y) ... ...'
    ~matches '2 4 6'

// make sure that repetitions work with `let`
check:
  let [index, ...]: [1, 2, 3]
  [index, ...]
  ~is [1, 2, 3]

// make sure `_` works right as a repetition binding
check:
  def [x, _, ...] = [1, 2, 3]
  x
  ~is 1

// nestings of lists and pair lists
block:
  use_static
  class Posn(x, y)

  def [[x :~ Posn, ...], ...] = [[Posn(1, 2)], [Posn(3, 4), Posn(5, 6)]]
  def [[[z :~ Posn, ...], ...], ...] = [[[Posn(1, 2)], [Posn(3, 4), Posn(5, 6)]]]

  check PairList(PairList(x, ...), ...)[0][0].x ~is 1
  check PairList[PairList[x, ...], ...][0][0].x ~is 1

  check [PairList[x, ...], ...] ~is [PairList[Posn(1, 2)], PairList[Posn(3, 4), Posn(5, 6)]]
  check [PairList[x, ...], ...][0][0].x ~is 1
  check [PairList[x, ...], ...][1][1].x ~is 5

  check PairList[[x, ...], ...] ~is PairList[[Posn(1, 2)], [Posn(3, 4), Posn(5, 6)]]
  check PairList[[x, ...], ...][0][0].x ~is 1
  check PairList[[x, ...], ...][1][1].x ~is 5

  check [[[z, ...], ...], ...] ~is [[[Posn(1, 2)], [Posn(3, 4), Posn(5, 6)]]]
  check [[[z, ...], ...], ...][0][0][0].x ~is 1

block:
  def [x, ...] = [[1, 2], [3, 4]]
  check [[0, & x], ...] ~is [[0, 1, 2], [0, 3, 4]]
  check [PairList[0, & x], ...] ~is [PairList[0, 1, 2], PairList[0, 3, 4]]

// check that non-repeatable expression forms are explained as such
check:
  ~eval
  def [x, ...] = [1, 2, 3]
  [[if 1 | 2 | 3, x,] ...]
  ~throws "cannot use expression binding as a repetition"

check:
  ~eval
  [x, ...]
  ~throws "not a repetition"

check:
  ~eval
  def [x, ...] = [1, 2, 3]
  [x, ..., ...]
  ~throws "used with wrong repetition depth"

// check that fallback to expression binding works with namespaces
block:
  import rhombus/meta open
  namespace A1:
    export fun add1(x):
      x + 1
  namespace A2:
    export:
      only_space expr:
        add2
    fun add2(x):
      x + 2
  namespace A3:
    export:
      except_space repet:
        add3
    fun add3(x):
      x + 3

  let [num, ...] = [1, 2, 3]
  check [A1.add1(num), ...] ~is [2, 3, 4]  
  check [A2.add2(num), ...] ~is [3, 4, 5]
  check [A3.add3(num), ...] ~is [4, 5, 6]

// Check `Function.count` optimization
block:
  let [x, ...] = [1, 2, 3, 4]
  let [[y, ...], ...] = [[1, 2, 3, 4], [5]]
  check: Function.count(x, ...)
         ~is 4
  check: Function.count(y, ..., ...)
         ~is 5
  check: Function.count("hi", y, ..., ...)
         ~is 6
  check: Function.count(x, ..., ~b_flat: 10)
         ~throws "function does not accept keyword arguments"
  check: Function.count(&[x, ...])
         ~is 4
  check: Function.count is_a Function
         ~is #true
  block:
    use_static
    check: Function.count(1, 2) < Function.count(3, 4, 5)
           ~is #true

check:
  [each #'oops, ...] ~throws values(
    "each: " ++ error.annot_msg(),
    error.annot("Sequence").msg,
    error.val(#'oops).msg,
  )

block:
  use_static
  let [x, ...] = ["a", "b", "c"]
  check [index(x), ...] ~is [0, 1, 2]
  check [{index(x), x}, ...] ~is [{0, "a"}, {1, "b"}, {2, "c"}]
  check [index(x) * 10, ...] ~is [0, 10, 20]
  check [index(x) < index(x), ...] ~is [#false, #false, #false]
  check [index(x) < 10, ...] ~is [#true, #true, #true]
  let [[y, ...], ...] = [["a", "b", "c"], ["d"]]
  check [[index(y), ...], ...] ~is [[0, 1, 2], [0]]
  check [[index(y, 2), ...], ...] ~is [[0, 0, 0], [1]]
  check [index([y, ...]), ...] ~is [0, 1]

check:
  ~eval
  [index(0), ...]
  ~throws "expected a repetition of at least depth 1"

check:
  ~eval
  def [x, ...] = [1, 2, 3]
  [index(x, 2), ...]
  ~throws "expected a repetition of at least depth 2"

check:
  ~eval
  [index(0, 0), ...]
  ~throws "expected a literal positive integer"

check:
  ~eval
  [index(0, a b c), ...]
  ~throws "expected a literal positive integer"

version_guard.at_least "9.0.0.2":
  // requires `in-parallel-values` at the Racket level
  check:
    def [x, ...] = [1, 2, 3]
    [[index(index(index(x))), x], ...]
    ~is [[0, 1], [1, 2], [2, 3]]

version_guard.at_least "9.0.0.2":
  check:
    let [x, ...] = [1, 2, 3]
    let [y, ...] = [1, 2]
    [[x, y], ...]
    ~throws "incompatible repetition lengths for ellipsis"

block:
  let [x, ...] = ["a", "b"]
  check [{0, x}, ...] ~is [{0, "a"}, {0, "b"}]
  check [deepen 0 ~like x, ...] ~is [0, 0]
  let [[y, ...], ...] = [[1, 2, 3], [4, 5]]
  check [[{0, y}, ...], ...] ~is [[{0, 1}, {0, 2}, {0, 3}], [{0, 4}, {0, 5}]]
  check [[{deepen 0 ~like y, y}, ...], ...] ~is [[{0, 1}, {0, 2}, {0, 3}], [{0, 4}, {0, 5}]]
  check [[deepen 0 ~like y, ...], ...] ~is [[0, 0, 0], [0, 0]]
  check [[deepen x ~like y, ...], ...] ~is  [["a", "b"], ["a", "b"]]
  check [[deepen x ~like_inner y, ...], ...] ~is [["a", "a", "a"], ["b", "b"]]
  check [[{deepen x ~like_inner y, y}, ...], ...] ~is [[{"a", 1}, {"a", 2}, {"a", 3}], [{"b", 4}, {"b", 5}]]
  version_guard.at_least "9.0.0.2":
    check [[{x, y}, ...], ...] ~throws "incompatible repetition lengths for ellipsis"
    check [[{deepen x ~like y, y}, ...], ...] ~throws "incompatible repetition lengths for ellipsis"
