#lang rhombus/and_meta
import:
  rhombus/runtime_path
  lib("racket/base.rkt")
  lib("syntax/modread.rkt")

runtime_path.def def_rhm: "origin-def.rhm"
runtime_path.def annot_rhm: "origin-annot.rhm"
runtime_path.def bind_rhm: "origin-bind.rhm"
runtime_path.def repet_rhm: "origin-repet.rhm"
runtime_path.def rx_rhm: "origin-rx.rhm"
runtime_path.def defctx_rhm: "origin-defctx.rhm"
runtime_path.def class_rhm: "origin-class.rhm"
runtime_path.def for_rhm: "origin-for.rhm"
runtime_path.def stxclass_rhm: "origin-stxclass.rhm"
runtime_path.def space_rhm: "origin-space.rhm"

fun check_origins(o_rhm, space_sym, expect :: Map):
  Closeable.let in = Port.Input.open_file(o_rhm)
  let stx:
    modread.#{with-module-reading-parameterization}(
      fun ():
        base.#{read-syntax}(Port.name(in), in)
    )
  let exp_stx:
    parameterize { base.#{current-load-relative-directory}:
                     Path.parent(o_rhm),
                   base.#{current-namespace}:
                     base.#{make-base-namespace}() }:
      base.#{expand}(stx)
  let intro: if space_sym
             | base.#{make-interned-syntax-introducer}(space_sym)
             | fun (x, mode): x
  let ns_intro = base.#{make-interned-syntax-introducer}(#'#{rhombus/namespace})
  let origins: MutableMap()
  fun search_props(v):
    cond
    | v is_a Identifier:
        search(v)
    | v is_a Pair:
        search_props(Pair.first(v))
        search_props(Pair.rest(v))
    | ~else:
        #void
  fun search(stx):
    cond
    | stx is_a Syntax:
        when stx is_a Identifier
          && base.#{syntax-original?}(stx)
          && !stx.property(#'#{identifier-as-keyword})
          && (base.#{bound-identifier=?}(stx, intro(stx, #'add))
                || base.#{bound-identifier=?}(stx, ns_intro(stx, #'add)))
        | origins[stx.unwrap()] := (origins.maybe[stx.unwrap()] || Set{}) ++ { stx.srcloc() }
        search_props(base.#{syntax-property}(stx, #'origin))
        search_props(base.#{syntax-property}(stx, #'#{disappeared-use}))
        // need to search bindings for uses, but don't add bindings
        search_props(base.#{syntax-property}(stx, #'#{disappeared-binding}))
        search(base.#{syntax-e}(stx))
    | stx is_a Pair:
        search(Pair.first(stx))
        search(Pair.rest(stx))
    | ~else:
        #void
  search(exp_stx)
  for:
    each (sym, n): expect
    check:
      [sym, origins.maybe[sym]?.length()]
      ~is [sym, n]

check_origins(def_rhm,
              #false,
              { #'let: 2,
                #'def: 2,
                #'x1: 2,
                #'x2: 2,
                #'x3: 2,
                #'x4: 3 })

check_origins(annot_rhm,
              #'#{rhombus/annot},
              { #'Posn: 6,
                #'Pt: 9,
                #'Foo: 2,
                #'Sequence: 1,
                #'maybe: 1,
                #'List: 2,
                #'Map: 1,
                #'False: 1,
                #'OR: 2,
                #'Array: 1,
                #'#{->}: 1,
                #'#{\|\|}: 1,
                #'Function: 1 })

check_origins(bind_rhm,
              #'#{rhombus/annot},
              { #'Posn: 24,
                #'Int: 1 })

check_origins(bind_rhm,
              #'#{rhombus/bind},
              { #'#{&&}: 1,
                #'#{::}: 6 })

check_origins(repet_rhm,
              #'#{rhombus/repet},
              { #'an_x: 4,
                #'a_y: 3,
                #'a_t: 2,
                #'m_arg: 2 })

check_origins(rx_rhm,
              #'#{rhombus/rx},
              { #'#{++}: 12,
                #'#{*}: 1,
                #'#{?}: 1,
                #'#{~~}: 1,
                #'case_sensitive: 1,
                #'case_insensitive: 1 })

check_origins(defctx_rhm,
              #'#{rhombus/def_ctx_example},
              { #'my_example_macro: 2 })

check_origins(class_rhm,
              #false,
              { #'method: 4,
                #'field: 2,
                #'property: 1 })

check_origins(class_rhm,
              #'#{rhombus/annot},
              { #'String: 3,
                #'Bytes: 1})

check_origins(for_rhm,
              #'#{rhombus/reducer},
              { #'List: 1 })

check_origins(for_rhm,
              #false,
              { #'#{..}: 2 })

check_origins(stxclass_rhm,
              #'#{rhombus/stxclass},
              { #'Int: 3 })

check_origins(stxclass_rhm,
              #false,
              { #'ns: 6 })

check_origins(space_rhm,
              #false,
              { #'paren_local_x: 2,
                #'as_demo: 2 })

check_origins(space_rhm,
              #'#{rhombus/example/demo},
              { #'ddef: 2 })
